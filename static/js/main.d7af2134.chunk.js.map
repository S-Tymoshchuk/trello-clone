{"version":3,"sources":["components/trelloCard.js","reducers/reduser-list.js","components/trelloActionButton.js","components/trelloList.js","reducers/reducer-appbar-status.js","materialUI/App-bar.js","materialUI/Drawer.js","components/App.js","store/store.js","index.js"],"names":["CardStyle","styled","div","TrelloCard","text","id","index","draggableId","String","provided","ref","innerRef","draggableProps","dragHandleProps","Card","CardContent","Typography","listId","cardId","initial","title","card","addList","type","payload","addCard","sort","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","listReducer","state","action","newItem","newCard","map","list","newState","newList","splice","find","listStart","listEnd","TrelloActionButton","formOpen","textValue","e","setState","target","value","changeState","formClose","renderButton","buttonText","props","RenderButtonSc","onClick","Icon","handleAddList","dispatch","handleAddCard","renderForm","placeHolder","buttonTitle","style","display","CardSc","TextareaAutosizeSc","onBlur","autoFocus","onChange","placeholder","ButtonFormContainer","Button","onMouseDown","color","backgroundColor","cursor","this","React","Component","TextareaAutosize","connect","ContainerStyled","TrelloList","cards","droppableId","droppableProps","key","appBarStatus","actionAppSwapStatus","status","classes","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","useStyles","marginBottom","AppBar","position","Toolbar","IconButton","edge","className","aria-label","variant","width","fullList","appBar","console","log","Drawer","open","onClose","role","List","ListItem","button","ListItemIcon","ListItemText","primary","Divider","App","onDragEnd","result","destination","source","lists","direction","ListStyle","reducers","combineReducers","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"oVAQA,IAuBMA,EAAYC,IAAOC,IAAV,KAIAC,EA3BI,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,GAAGC,EAAW,EAAXA,MAC1B,OACI,kBAAC,IAAD,CAAWC,YAAaC,OAAOH,GAAKC,MAAOA,IAEnC,SAACG,GAAD,OACI,kBAACT,EAAD,eAAWU,IAAKD,EAASE,UACVF,EAASG,eACTH,EAASI,iBACpB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACKZ,U,kDCfjCa,EAAS,EACTC,EAAS,EAEPC,EAAU,CACZ,CACIC,MAAO,UACPf,GAAG,QAAD,OAAU,GACZgB,KAAM,CACF,CACIhB,GAAG,QAAD,OAAU,GACZD,KAAM,+XAEV,CACIC,GAAG,QAAD,OAAU,GACZD,KAAM,0UAIlB,CACIgB,MAAO,YACPf,GAAG,QAAD,OAAU,GACZgB,KAAM,CACF,CACIhB,GAAG,QAAD,OAAU,GACZD,KAAM,gFAEV,CACIC,GAAG,QAAD,OAAU,GACZD,KAAM,oJAuETkB,EAAU,SAAClB,GACpB,MAAO,CAACmB,KAxGK,WAwGWC,QAASpB,IAGxBqB,EAAU,SAACrB,EAAMa,GAC1B,MAAO,CAACM,KA3GK,WA2GWC,QAAS,CAACpB,OAAMa,YAG/BS,EAAO,SAChBC,EACAC,EACAC,EACAC,EACAvB,EACAgB,GAEA,MAAO,CACHA,KAtHa,eAuHbC,QAAS,CACLG,mBACAC,iBACAC,sBACAC,oBACAvB,cACAgB,UAKGQ,EA9FK,WAA8B,IAA7BC,EAA4B,uDAApBb,EAASc,EAAW,uCAC7C,OAAQA,EAAOV,MACX,IAxCS,WAyCL,IAAMW,EAAU,CACZd,MAAOa,EAAOT,QACdnB,GAAG,QAAD,OAAUY,GACZI,KAAM,IAGV,OADAJ,GAAU,EACJ,GAAN,mBAAWe,GAAX,CAAkBE,IAEtB,IAhDS,WAiDL,IAAMA,EAAU,CAEZ7B,GAAG,QAAD,OAAUa,GACZd,KAAM6B,EAAOT,QAAQpB,MAEzBc,GAAU,EACV,IAAMiB,EAAUH,EAAMI,KAAI,SAACC,GACvB,OAAIA,EAAKhC,KAAO4B,EAAOT,QAAQP,OACpB,eAAIoB,EAAX,CAAiBhB,KAAK,GAAD,mBAAMgB,EAAKhB,MAAX,CAAiBa,MAEnCG,KAEX,OAAOF,EAEX,IA9Da,eA8Db,MAOQF,EAAOT,QALPG,EAFR,EAEQA,iBACAC,EAHR,EAGQA,eACAC,EAJR,EAIQA,oBACAC,EALR,EAKQA,kBACAP,EANR,EAMQA,KAEEe,EAAQ,YAAON,GACrB,GAAa,SAATT,EAAiB,CACjB,IAAMgB,EAAUD,EAASE,OAAOX,EAAqB,GAErD,OADAS,EAASE,OAAT,MAAAF,EAAQ,CAAQR,EAAmB,GAA3B,mBAAiCS,KAClCD,EAIX,GAAIX,IAAqBC,EAAgB,CAAC,IAAD,EAE/BS,EAAOL,EAAMS,MAAK,SAAAJ,GAAI,OAAIV,IAAqBU,EAAKhC,MACpDgB,EAAOgB,EAAKhB,KAAKmB,OAAOX,EAAqB,IACnD,EAAAQ,EAAKhB,MAAKmB,OAAV,SAAiBV,EAAmB,GAApC,mBAA0CT,KAE9C,GAAIM,IAAqBC,EAAgB,CAAC,IAAD,EAG/Bc,EAAYV,EAAMS,MAAK,SAAAJ,GAAI,OAAIV,IAAqBU,EAAKhC,MAEzDgB,EAAOqB,EAAUrB,KAAKmB,OAAOX,EAAqB,GAElDc,EAAUX,EAAMS,MAAK,SAAAJ,GAAI,OAAIT,IAAmBS,EAAKhC,OAE3D,EAAAsC,EAAQtB,MAAKmB,OAAb,SAAoBV,EAAmB,GAAvC,mBAA6CT,KAEjD,OAAOiB,EACX,QACI,OAAON,I,wnBC3FbY,E,2MAEFZ,MAAQ,CACJa,UAAU,EACVzC,KAAM,I,EAGV0C,UAAY,SAACC,GACT,EAAKC,SAAS,CACV5C,KAAM2C,EAAEE,OAAOC,S,EAIvBC,YAAc,WACV,EAAKH,SAAS,CACVH,UAAU,K,EAIlBO,UAAY,WACR,EAAKJ,SAAS,CACVH,UAAU,K,EAIlBQ,aAAe,WAAO,IAEZC,EADS,EAAKC,MAAblB,KACmB,mBAAqB,mBAC/C,OACI,kBAACmB,EAAD,CAAgBC,QAAS,EAAKN,aAC1B,kBAACO,EAAA,EAAD,YACA,2BAAIJ,K,EAMhBK,cAAgB,WAAO,IACZC,EAAY,EAAKL,MAAjBK,SACAxD,EAAQ,EAAK4B,MAAb5B,KACHA,GACA,EAAK4C,SAAS,CACV5C,KAAM,KAGdwD,EAAStC,EAAQlB,K,EAIrByD,cAAgB,WAAO,IAAD,EACS,EAAKN,MAAzBK,EADW,EACXA,SAAU3C,EADC,EACDA,OACVb,EAAQ,EAAK4B,MAAb5B,KACHA,GACA,EAAK4C,SAAS,CACV5C,KAAM,KAGdwD,EAASnC,EAAQrB,EAAMa,K,EAI3B6C,WAAa,WAAO,IACTzB,EAAQ,EAAKkB,MAAblB,KACD0B,EAAc1B,EAAO,sBAAwB,sBAC7C2B,EAAc3B,EAAO,WAAa,WACxC,OACI,6BACI,yBAAK4B,MAAO,CAACC,QAAS,SAClB,kBAACC,EAAD,KACI,kBAACC,EAAD,CAAoBC,OAAQ,EAAKjB,UAAWkB,WAAS,EAACpB,MAAO,EAAKlB,MAAM5B,KACpDmE,SAAU,EAAKzB,UAAW0B,YAAaT,MAGnE,kBAACU,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQC,YAAatC,EAAO,EAAKwB,cAAgB,EAAKF,cAAeM,MAAO,CACxEW,MAAO,QACPC,gBAAiB,YAEhBb,GAEL,kBAACN,EAAA,EAAD,CAAMO,MAAO,CAACa,OAAQ,WAAYrB,QAAS,EAAKL,WAAhD,Y,wEAOZ,OACI,6BACK2B,KAAK/C,MAAMa,SAAWkC,KAAKjB,aAAeiB,KAAK1B,oB,GAzF/B2B,IAAMC,WA+FjCR,EAAsBxE,IAAOC,IAAV,KAMnBsD,EAAiBvD,IAAOC,IAAV,KAUdiE,EAASlE,YAAOa,IAAPb,CAAH,KAQNmE,EAAqBnE,YAAOiF,IAAPjF,CAAH,KAQTkF,gBAAUvC,G,0KCjIzB,IAkCMwC,EAAkBnF,IAAOC,IAAV,KASNmF,EA3CI,SAAC,GAAmC,IAAlCjE,EAAiC,EAAjCA,MAAOkE,EAA0B,EAA1BA,MAAOrE,EAAmB,EAAnBA,OAAQX,EAAW,EAAXA,MAEvC,OACI,kBAAC,IAAD,CAAWC,YAAaU,EAAQX,MAAOA,IAE/B,SAACG,GAAD,OACI,uCAAKC,IAAKD,EAASE,UAAcF,EAASG,eACjCH,EAASI,iBACd,kBAAC,IAAD,CAAW0E,YAAa/E,OAAOS,KAEvB,SAACR,GAAD,OACI,kBAAC2E,EAAD,eAAiB1E,IAAKD,EAASE,UAAcF,EAAS+E,gBAClD,4BAAKpE,GAEDkE,EAAMlD,KAAI,SAACf,EAAMf,GACb,OAAO,kBAAC,EAAD,CAAYmF,IAAKpE,EAAKhB,GAAID,KAAMiB,EAAKjB,KAAMC,GAAIgB,EAAKhB,GACxCC,MAAOA,OAGjCG,EAAS+D,YACV,kBAAC,EAAD,CAAoBvD,OAAQA,EAAQoB,MAAI,a,qDCxB1ElB,EAAU,CACZuE,cAAc,GAeLC,GAAsB,SAACC,GAChC,MAAO,CACHrE,KApBQ,UAqBRC,QAASoE,IAIFF,GAlBM,WAA8B,IAA7B1D,EAA4B,uDAApBb,EAASc,EAAW,uCAC9C,OAAQA,EAAOV,MACX,IATQ,UAUJ,OAAO,eACAS,EADP,CACc0D,aAAczD,EAAOT,UAEvC,QACI,OAAOQ,IC+BJmD,kBAjCS,SAAC5B,GACrB,IAWMsC,EAXYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,SAAU,GAEdC,WAAY,CACRC,YAAaJ,EAAMK,QAAQ,IAE/BhF,MAAO,CACH6E,SAAU,MAGFI,GAChB,OACI,yBAAKpC,MAAO,CAACqC,aAAc,SACvB,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYjD,QAAS,WACjBF,EAAMK,SAAS+B,IAAoB,KACpCgB,KAAK,QAAQC,UAAWf,EAAQK,WAAYtB,MAAM,UAAUiC,aAAW,QACtE,kBAAC,IAAD,OAEJ,kBAAC7F,EAAA,EAAD,CAAY8F,QAAQ,KAAKF,UAAWf,EAAQzE,OAA5C,uBAGA,kBAACsD,EAAA,EAAD,CAAQE,MAAM,WAAd,e,gKCrBdyB,GAAYP,YAAW,CACzBzD,KAAM,CACF0E,MAAO,KAEXC,SAAU,CACND,MAAO,UA8DA5B,gBANS,SAACnD,GACrB,MAAO,CACH4D,OAAQ5D,EAAMiF,UAIP9B,EA1DS,SAAC5B,GACrB2D,QAAQC,IAAI5D,GACZ,IAAMsC,EAAUQ,KAuChB,OACI,6BACI,kBAACe,GAAA,EAAD,CAAQC,KAAM9D,EAAMqC,OAAOF,aAAc4B,QAAS,WAC9C/D,EAAMK,SAAS+B,IAAoB,MAvC3C,yBACIiB,UAAWf,EAAQxD,KACnBkF,KAAK,eACL9D,SAAS,GAET,kBAAC+D,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAUC,QAAM,GACZ,kBAACC,GAAA,EAAD,KAAc,kBAAC,KAAD,OACd,kBAACC,GAAA,EAAD,CAAcC,QAAQ,UAE1B,kBAACC,GAAA,EAAD,MACA,kBAACL,GAAA,EAAD,CAAUC,QAAM,GACZ,kBAACC,GAAA,EAAD,KAAc,kBAAC,KAAD,OACd,kBAACC,GAAA,EAAD,CAAcC,QAAQ,YAE1B,kBAACC,GAAA,EAAD,MACA,kBAACL,GAAA,EAAD,CAAUC,QAAM,GACZ,kBAACC,GAAA,EAAD,KAAc,kBAAC,KAAD,OACd,kBAACC,GAAA,EAAD,CAAcC,QAAQ,uBAE1B,kBAACC,GAAA,EAAD,MACA,kBAACL,GAAA,EAAD,CAAUC,QAAM,GACZ,kBAACC,GAAA,EAAD,KAAc,kBAAC,KAAD,OACd,kBAACC,GAAA,EAAD,CAAcC,QAAQ,iBAE1B,kBAACC,GAAA,EAAD,MACA,kBAACL,GAAA,EAAD,CAAUC,QAAM,GACZ,kBAACC,GAAA,EAAD,KAAc,kBAAC,KAAD,OACd,kBAACC,GAAA,EAAD,CAAcC,QAAQ,4BAE1B,kBAACC,GAAA,EAAD,a,6FCjDVC,G,2MAEFC,UAAY,SAACC,GAETf,QAAQC,IAAIc,GAFQ,IAGbC,EAA0CD,EAA1CC,YAAaC,EAA6BF,EAA7BE,OAAQ5H,EAAqB0H,EAArB1H,YAAagB,EAAQ0G,EAAR1G,KACpC2G,GAGL,EAAK3E,MAAMK,SAASlC,EAAKyG,EAAO5C,YAAa2C,EAAY3C,YAAa4C,EAAO7H,MAAO4H,EAAY5H,MAAOC,EAAYgB,K,wEAG7G,IACD6G,EAASrD,KAAKxB,MAAd6E,MACL,OACI,6BACI,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,IAAD,CAAiBJ,UAAWjD,KAAKiD,WAC7B,kBAAC,IAAD,CAAWzC,YAAY,YAAY8C,UAAU,aAAa9G,KAAK,SAEvD,SAACd,GAAD,OACI,kBAAC6H,GAAD,eAAW5H,IAAKD,EAASE,UAAcF,EAAS+E,gBAExC4C,EAAMhG,KAAI,SAACC,EAAM/B,GACb,OAAO,kBAAC,EAAD,CAAYmF,IAAKpD,EAAKhC,GAAIe,MAAOiB,EAAKjB,MAAOkE,MAAOjD,EAAKhB,KAC7CJ,OAAQoB,EAAKhC,GAAIC,MAAOA,OAGlDG,EAAS+D,YACV,kBAAC,EAAD,gB,GA9BlBS,aA0CZqD,GAAYrI,IAAOC,IAAV,MAUAiF,gBANS,SAACnD,GACrB,MAAO,CACHoG,MAAOpG,EAAMoG,SAINjD,CAAyB4C,I,SC1DpCQ,GAAWC,aAAgB,CAC3BJ,MAAOrG,EACPkF,OAAQvB,KAKG+C,GAFDC,aAAYH,ICJ1BI,IAASC,OAAO,kBAAC,IAAD,CAAUH,MAAOA,IAAO,kBAAC,GAAD,OAAmBI,SAASC,eAAe,U","file":"static/js/main.d7af2134.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport styled from \"styled-components\";\r\nimport {Draggable} from \"react-beautiful-dnd\";\r\n\r\n\r\nconst TrelloCard = ({text, id,index}) => {\r\n    return (\r\n        <Draggable draggableId={String(id)} index={index}>\r\n            {\r\n                (provided) => (\r\n                    <CardStyle ref={provided.innerRef}\r\n                               {...provided.draggableProps}\r\n                               {...provided.dragHandleProps}>\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Typography>\r\n                                    {text}\r\n                                </Typography>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </CardStyle>\r\n                )\r\n            }\r\n\r\n        </Draggable>\r\n    );\r\n};\r\n\r\nconst CardStyle = styled.div`\r\n  margin-top: 8px;\r\n`;\r\n\r\nexport default TrelloCard;","const ADD_LIST = \"ADD_LIST\";\r\nconst ADD_CARD = \"ADD_CARD\";\r\nconst DRAG_HAPPEND = \"DRAG_HAPPEND\";\r\n\r\nlet listId = 2;\r\nlet cardId = 5;\r\n\r\nconst initial = [\r\n    {\r\n        title: \"Episode\",\r\n        id: `list-${0}`,\r\n        card: [\r\n            {\r\n                id: `card-${0}`,\r\n                text: \"Обертиллиах-2019. Меркушина добыла серебро в короткой индивидуальной гонке\"\r\n            },\r\n            {\r\n                id: `card-${1}`,\r\n                text: \"Владимир ШАРАН: «Заря – сильнейшая команда в УПЛ после Шахтера»\"\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        title: \"Episode 1\",\r\n        id: `list-${1}`,\r\n        card: [\r\n            {\r\n                id: `card-${2}`,\r\n                text: \"Notice that because we used the ES6 shorthand for defining an object literal\"\r\n            },\r\n            {\r\n                id: `card-${3}`,\r\n                text: \"Also, the resulting names are a bit odd. It's generally not a good practice to actually include words like \\\"reducer\\\" in your state key names\"\r\n            },\r\n        ]\r\n    }\r\n];\r\n\r\nconst listReducer = (state = initial, action) => {\r\n    switch (action.type) {\r\n        case ADD_LIST:\r\n            const newItem = {\r\n                title: action.payload,\r\n                id: `list-${listId}`,\r\n                card: []\r\n            };\r\n            listId += 1;\r\n            return [...state, newItem];\r\n\r\n        case ADD_CARD: {\r\n            const newItem = {\r\n\r\n                id: `list-${cardId}`,\r\n                text: action.payload.text\r\n            };\r\n            cardId += 1;\r\n            const newCard = state.map((list) => {\r\n                if (list.id === action.payload.listId) {\r\n                    return {...list, card: [...list.card, newItem]};\r\n                }\r\n                return list;\r\n            });\r\n            return newCard;\r\n        }\r\n        case DRAG_HAPPEND:\r\n            const {\r\n                droppableIdStart,\r\n                droppableIdEnd,\r\n                droppableIndexStart,\r\n                droppableIndexEnd,\r\n                type\r\n            } = action.payload;\r\n            const newState = [...state];\r\n            if (type === \"list\") {\r\n                const newList = newState.splice(droppableIndexStart, 1);\r\n                newState.splice(droppableIndexEnd, 0, ...newList);\r\n                return newState;\r\n            }\r\n\r\n            //same list\r\n            if (droppableIdStart === droppableIdEnd) {\r\n\r\n                const list = state.find(list => droppableIdStart === list.id);\r\n                const card = list.card.splice(droppableIndexStart, 1);\r\n                list.card.splice(droppableIndexEnd, 0, ...card);\r\n            }\r\n            if (droppableIdStart !== droppableIdEnd) {\r\n\r\n                // найти список, где произошло перетаскивание\r\n                const listStart = state.find(list => droppableIdStart === list.id);\r\n               //вытащить карточку из этого списка\r\n                const card = listStart.card.splice(droppableIndexStart, 1);\r\n                //найти список, где перетаскивание закончилось\r\n                const listEnd = state.find(list => droppableIdEnd === list.id);\r\n                // положить карту в новый список\r\n                listEnd.card.splice(droppableIndexEnd, 0, ...card);\r\n            }\r\n            return newState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const addList = (text) => {\r\n    return {type: ADD_LIST, payload: text};\r\n};\r\n\r\nexport const addCard = (text, listId) => {\r\n    return {type: ADD_CARD, payload: {text, listId}};\r\n};\r\n\r\nexport const sort = (\r\n    droppableIdStart,\r\n    droppableIdEnd,\r\n    droppableIndexStart,\r\n    droppableIndexEnd,\r\n    draggableId,\r\n    type\r\n) => {\r\n    return {\r\n        type: DRAG_HAPPEND,\r\n        payload: {\r\n            droppableIdStart,\r\n            droppableIdEnd,\r\n            droppableIndexStart,\r\n            droppableIndexEnd,\r\n            draggableId,\r\n            type\r\n        }\r\n    };\r\n};\r\n\r\nexport default listReducer;","import React from \"react\";\r\nimport {Card, Icon} from \"@material-ui/core\";\r\nimport TextareaAutosize from \"react-textarea-autosize\";\r\nimport styled from \"styled-components\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {connect} from \"react-redux\";\r\nimport {addCard, addList} from \"../reducers/reduser-list\";\r\n\r\nclass TrelloActionButton extends React.Component {\r\n\r\n    state = {\r\n        formOpen: false,\r\n        text: \"\"\r\n    };\r\n\r\n    textValue = (e) => {\r\n        this.setState({\r\n            text: e.target.value\r\n        });\r\n    };\r\n\r\n    changeState = () => {\r\n        this.setState({\r\n            formOpen: true\r\n        });\r\n    };\r\n\r\n    formClose = () => {\r\n        this.setState({\r\n            formOpen: false\r\n        });\r\n    };\r\n\r\n    renderButton = () => {\r\n        const {list} = this.props;\r\n        const buttonText = list ? \"Add another card\" : \"Add another list\";\r\n        return (\r\n            <RenderButtonSc onClick={this.changeState}>\r\n                <Icon>add</Icon>\r\n                <p>{buttonText}</p>\r\n            </RenderButtonSc>\r\n        );\r\n\r\n    };\r\n\r\n    handleAddList = () => {\r\n        const {dispatch} = this.props;\r\n        const {text} = this.state;\r\n        if (text) {\r\n            this.setState({\r\n                text: \"\"\r\n            });\r\n        }\r\n        dispatch(addList(text));\r\n        return;\r\n    };\r\n\r\n    handleAddCard = () => {\r\n        const {dispatch, listId} = this.props;\r\n        const {text} = this.state;\r\n        if (text) {\r\n            this.setState({\r\n                text: \"\"\r\n            });\r\n        }\r\n        dispatch(addCard(text, listId));\r\n        return;\r\n    };\r\n\r\n    renderForm = () => {\r\n        const {list} = this.props;\r\n        const placeHolder = list ? \"Add another card...\" : \"Add another list...\";\r\n        const buttonTitle = list ? \"Add card\" : \"Add list\";\r\n        return (\r\n            <div>\r\n                <div style={{display: \"flex\"}}>\r\n                    <CardSc>\r\n                        <TextareaAutosizeSc onBlur={this.formClose} autoFocus value={this.state.text}\r\n                                            onChange={this.textValue} placeholder={placeHolder}/>\r\n                    </CardSc>\r\n                </div>\r\n                <ButtonFormContainer>\r\n                    <Button onMouseDown={list ? this.handleAddCard : this.handleAddList} style={{\r\n                        color: \"white\",\r\n                        backgroundColor: \"#5aac44\"\r\n                    }}>\r\n                        {buttonTitle}\r\n                    </Button>\r\n                    <Icon style={{cursor: \"pointer\"}} onClick={this.formClose}>close</Icon>\r\n                </ButtonFormContainer>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.formOpen ? this.renderForm() : this.renderButton()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst ButtonFormContainer = styled.div`\r\ndisplay: flex;\r\nalign-items: center;\r\nmargin-top: 5px;\r\n`;\r\n\r\nconst RenderButtonSc = styled.div`\r\ndisplay: flex;\r\nalign-items: center;\r\ncursor: pointer;\r\nborder-radius: 3px;\r\nheight: 36px;\r\nwidth: 272px;\r\npadding-left: 10px;\r\n`;\r\n\r\nconst CardSc = styled(Card)`\r\noverflow: visible;\r\nmin-height: 70px;\r\nmin-width: 272px;\r\npadding: 6px 8px 2px;\r\nmargin-top: 10px;\r\n`;\r\n\r\nconst TextareaAutosizeSc = styled(TextareaAutosize)`\r\nresize: none;\r\nwidth: 100%;\r\noutline: none;\r\nborder: none;\r\n`;\r\n\r\n\r\nexport default connect()(TrelloActionButton);\r\n","import React from \"react\";\r\nimport TrelloCard from \"./trelloCard\";\r\nimport styled from \"styled-components\";\r\nimport TrelloActionButton from \"./trelloActionButton\";\r\nimport {Droppable, Draggable} from \"react-beautiful-dnd\";\r\n\r\nconst TrelloList = ({title, cards, listId, index}) => {\r\n\r\n    return (\r\n        <Draggable draggableId={listId} index={index}>\r\n            {\r\n                (provided) => (\r\n                    <div ref={provided.innerRef} {...provided.draggableProps}\r\n                         {...provided.dragHandleProps}>\r\n                        <Droppable droppableId={String(listId)}>\r\n                            {\r\n                                (provided) => (\r\n                                    <ContainerStyled ref={provided.innerRef} {...provided.droppableProps}>\r\n                                        <h4>{title}</h4>\r\n                                        {\r\n                                            cards.map((card, index) => {\r\n                                                return <TrelloCard key={card.id} text={card.text} id={card.id}\r\n                                                                   index={index}/>;\r\n                                            })\r\n                                        }\r\n                                        {provided.placeholder}\r\n                                        <TrelloActionButton listId={listId} list/>\r\n                                    </ContainerStyled>\r\n                                )\r\n                            }\r\n\r\n                        </Droppable>\r\n                    </div>\r\n                )\r\n            }\r\n\r\n        </Draggable>\r\n    );\r\n};\r\n\r\nconst ContainerStyled = styled.div`\r\nbackground-color: #dfe3e6;\r\nborder-radius: 3px;\r\nwidth: 300px;\r\npadding: 8px;\r\nmargin-right: 8px;\r\n`;\r\n\r\n\r\nexport default TrelloList;","const APP_BAR = \"APP_BAR\";\r\n\r\nconst initial = {\r\n    appBarStatus: false\r\n};\r\n\r\n\r\nconst appBarStatus = (state = initial, action) => {\r\n    switch (action.type) {\r\n        case APP_BAR:\r\n            return {\r\n                ...state, appBarStatus: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actionAppSwapStatus = (status) => {\r\n    return {\r\n        type: APP_BAR,\r\n        payload: status\r\n    };\r\n};\r\n\r\nexport default appBarStatus;","import React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport {connect} from \"react-redux\";\r\nimport {actionAppSwapStatus} from \"../reducers/reducer-appbar-status\";\r\n\r\n\r\nconst AppBarComponent = (props) => {\r\n    const useStyles = makeStyles(theme => ({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        title: {\r\n            flexGrow: 1,\r\n        },\r\n    }));\r\n    const classes = useStyles();\r\n    return (\r\n        <div style={{marginBottom: \"20px\"}}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton onClick={() => {\r\n                        props.dispatch(actionAppSwapStatus(true))\r\n                    }} edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        My small project :)\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default connect()(AppBarComponent);\r\n\r\n\r\n","import React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport {connect} from \"react-redux\";\r\nimport {actionAppSwapStatus} from \"../reducers/reducer-appbar-status\";\r\nimport HomeTwoToneIcon from '@material-ui/icons/HomeTwoTone';\r\nimport AccountTreeTwoToneIcon from '@material-ui/icons/AccountTreeTwoTone';\r\nimport AccountBalanceTwoToneIcon from '@material-ui/icons/AccountBalanceTwoTone';\r\nimport SupervisorAccountTwoToneIcon from '@material-ui/icons/SupervisorAccountTwoTone';\r\nimport MonetizationOnTwoToneIcon from '@material-ui/icons/MonetizationOnTwoTone';\r\n\r\nconst useStyles = makeStyles({\r\n    list: {\r\n        width: 250,\r\n    },\r\n    fullList: {\r\n        width: \"auto\",\r\n    },\r\n});\r\n\r\nconst TemporaryDrawer = (props) => {\r\n    console.log(props);\r\n    const classes = useStyles();\r\n\r\n    const sideList = side => (\r\n        <div\r\n            className={classes.list}\r\n            role=\"presentation\"\r\n            onClick={true}\r\n        >\r\n            <List>\r\n                <ListItem button>\r\n                    <ListItemIcon><HomeTwoToneIcon/></ListItemIcon>\r\n                    <ListItemText primary=\"Home\"/>\r\n                </ListItem>\r\n                <Divider/>\r\n                <ListItem button>\r\n                    <ListItemIcon><AccountTreeTwoToneIcon/></ListItemIcon>\r\n                    <ListItemText primary=\"Trello\"/>\r\n                </ListItem>\r\n                <Divider/>\r\n                <ListItem button>\r\n                    <ListItemIcon><AccountBalanceTwoToneIcon/></ListItemIcon>\r\n                    <ListItemText primary=\"Budget Controller\"/>\r\n                </ListItem>\r\n                <Divider/>\r\n                <ListItem button>\r\n                    <ListItemIcon><SupervisorAccountTwoToneIcon/></ListItemIcon>\r\n                    <ListItemText primary=\"Panel admin\"/>\r\n                </ListItem>\r\n                <Divider/>\r\n                <ListItem button>\r\n                    <ListItemIcon><MonetizationOnTwoToneIcon/></ListItemIcon>\r\n                    <ListItemText primary=\"Cryptocurrency tracker\"/>\r\n                </ListItem>\r\n                <Divider/>\r\n            </List>\r\n        </div>\r\n    );\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Drawer open={props.status.appBarStatus} onClose={() => {\r\n                props.dispatch(actionAppSwapStatus(false));\r\n            }}>\r\n                {sideList(\"left\")}\r\n            </Drawer>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        status: state.appBar\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(TemporaryDrawer);","import React, {Component} from \"react\";\nimport TrelloList from \"./trelloList\";\nimport {connect} from \"react-redux\";\nimport styled from \"styled-components\";\nimport TrelloActionButton from \"./trelloActionButton\";\nimport {DragDropContext, Droppable} from \"react-beautiful-dnd\";\nimport {sort} from \"../reducers/reduser-list\";\nimport AppBarComponent from \"../materialUI/App-bar\";\nimport DrawerComponent from \"../materialUI/Drawer\";\n\n\nclass App extends Component {\n\n    onDragEnd = (result) => {\n        // the only one that is required\n        console.log(result);\n        const {destination, source, draggableId, type} = result;\n        if (!destination) {\n            return;\n        }\n        this.props.dispatch(sort(source.droppableId, destination.droppableId, source.index, destination.index, draggableId,type));\n    };\n\n    render() {\n        let {lists} = this.props;\n        return (\n            <div>\n                <AppBarComponent/>\n                <DrawerComponent/>\n                <DragDropContext onDragEnd={this.onDragEnd}>\n                    <Droppable droppableId=\"all-lists\" direction=\"horizontal\" type=\"list\">\n                        {\n                            (provided) => (\n                                <ListStyle ref={provided.innerRef} {...provided.droppableProps}>\n                                    {\n                                        lists.map((list, index) => {\n                                            return <TrelloList key={list.id} title={list.title} cards={list.card}\n                                                               listId={list.id} index={index}/>;\n                                        })\n                                    }\n                                    {provided.placeholder}\n                                    <TrelloActionButton/>\n                                </ListStyle>\n                            )\n                        }\n                    </Droppable>\n                </DragDropContext>\n            </div>\n        );\n    }\n}\n\n\nconst ListStyle = styled.div`\ndisplay: flex;\n`;\n\nconst mapStateToProps = (state) => {\n    return {\n        lists: state.lists\n    };\n};\n\nexport default connect(mapStateToProps)(App);\n\n\n","import {combineReducers, createStore} from \"redux\";\r\nimport listReducer from \"../reducers/reduser-list\";\r\nimport appBarStatus from \"../reducers/reducer-appbar-status\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n    lists: listReducer,\r\n    appBar: appBarStatus\r\n});\r\n\r\nconst store = createStore(reducers);\r\n\r\nexport default store;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport {Provider} from \"react-redux\";\nimport store from \"./store/store\";\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById(\"root\"));\n\n\n"],"sourceRoot":""}